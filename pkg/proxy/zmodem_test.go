package proxy

import "testing"

func TestDecodeB16FrameHeader(t *testing.T) {
	//ZfileFrame := []byte{
	//	0x2a, 0x18, 0x41, 0x04, 0x00, 0x00, 0x06, 0x00, 0x23, 0xa0,
	//}
	jsFileFrame := []byte{
		0x2a, 0x18, 0x41, 0x18, 0x44, 0x18, 0x40, 0x18, 0x40, 0x18, 0x40, 0x18, 0x40, 0x18, 0xc9, 0x18,
		0x46, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x69,
	}
	h, offset, ok := DecodeB16FrameHeader(jsFileFrame)
	if !ok {
		t.Fatal("decode frame failed")
	}
	switch h.Type {
	case ZFileType:
		t.Log("zfile type")
	}
	t.Logf("frame len: %d, parse offset: %d\n", len(jsFileFrame), offset)
}

func TestConvertHexToOctets(t *testing.T) {
	//ZRINITHeader := []byte{
	//	0x2a, 0x2a, 0x18, 0x42, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x33, 0x62, 0x65, 0x35, 0x30, 0x0d, 0x8a,
	//}
	t.Logf("%+v", 1<<4)
	t.Logf("%+v\n", HexOctetValue)
}
